title: JK-BMS monitor
views:
  - title: Summary
    path: default_view
    badges: []
    cards:
      - type: vertical-stack
        cards:
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: >-
                      <center><font color=#3090C7 size=4>BMS_00 [{{
                      states('sensor.rs485_bms0_battery_total_runtime_formatted')
                      | string }}]&nbsp;&nbsp;{{
                      (states('sensor.rs485_bms0_battery_capacity_state_of_charge')
                      + ' %') }}   ({{
                        (states('sensor.rs485_bms0_battery_capacity_remaining')) }}Ah)
                      </center>
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      {%- set online =
                      states('binary_sensor.rs485_bms0_status_online')
                      %}                      

                      {%- set is_working = "online" if (online|bool) else
                      "offline" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (online|bool) else '<b><font size=2 color=red>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</font></b>' %} 

                      {{ font_start }} {{ "BMS:"}} {{ is_working }} {{font_end
                      -}}


                      {%- set precharging =
                      states('binary_sensor.rs485_bms0_status_precharging')
                      %}                      

                      {%- set is_working = "working" if (precharging|bool) else
                      "idle" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (precharging|bool) else '<font size=2>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</font>' %} 

                      {{ font_start }} {{ "Precharging:"}} {{ is_working }}
                      {{font_end -}}


                      {%- set heating =
                      states('binary_sensor.rs485_bms0_status_heating')
                      %}                      

                      {%- set is_working = "working" if (heating|bool) else
                      "idle" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (heating|bool) else '<font size=2>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</fontZ' %} 

                      {{ font_start }} {{ "Heating:"}} {{ is_working }}
                      {{font_end -}}
                  - type: markdown
                    content: >-
                      {%- set charging =
                      states('binary_sensor.rs485_bms0_status_charging')
                      %}                         

                      {%- set is_working = "working" if (charging|bool) else
                      "idle" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (charging|bool) else '<font size=2>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</font>' %} 

                      {{ font_start }} {{ "Charging:"}} {{ is_working }} {{
                      font_end -}}


                      {%- set discharging =
                      states('binary_sensor.rs485_bms0_status_discharging')
                      %}                         

                      {%- set is_working = "working" if (discharging|bool) else
                      "idle" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (discharging|bool) else '<font size=2>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</font>' %} 

                      {{ font_start }} {{ "Discharging:"}} {{ is_working }} {{
                      font_end -}}
                        
                      {%- set balancing_direction =
                      states('sensor.rs485_bms0_balancing_direction')%}   {%-
                      set is_working = "charging" if
                      (balancing_direction|int)==1 
                            else "discharging" if (balancing_direction|int)==2 
                            else "idle" if (balancing_direction|int)==0
                            else 'unknown' %} 
                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (balancing_direction|int)>0 
                            else '<b><font size=2 color=#3090C7>' if (balancing_direction|int)<0 
                            else '<font size=2>' %}                             
                      {%- set font_end = '</font></b>' if
                      (balancing_direction|int)!=0 else '</font>' %}  {{
                      font_start }} {{ "<br>Balancing:"}} {{ is_working }}
                      {{font_end -}}
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: >-
                      {%- set power_draw =
                      states('sensor.rs485_bms0_battery_power')|float %}  {%-
                      set power_charging =
                      states('sensor.rs485_bms0_battery_power_charging')|float
                      %}  {%- set power_discharging =
                      states('sensor.rs485_bms0_battery_power_discharging')|float
                      %} 

                      {%- set power_label = "(charging)" if (power_charging)>0 
                            else "(discharging)" if (power_discharging)>0 
                            else "" %} 

                      {%- set power_value = power_charging if
                      (power_charging)>0 
                            else power_discharging if (power_discharging)>0 
                            else power_draw %} 

                      {%- set font_start = '<b><font color=#41CD52 size=6>' if
                      (power_charging)>0 
                            else '<b><font color=#3090C7 size=6>' if (power_discharging)>0 
                            else '<b><font color=#aaaaaa size=6>' %}      
                            
                      {%- set font_end = '</font></b>' if (power_charging)>0 or
                      (power_discharging)>0 else '' %} 

                      <center>{{font_start}}{{ power_value }}W
                      {{power_label}}{{font_end}}</center>  

                      {% macro pad_right(w, s) %} {{ s }} {% set slen =  w -
                      (s|length) %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %}
                      <div>         
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      <center><b><font color=#41CD52
                      size=6>{{states('sensor.rs485_bms0_battery_voltage')
                      }}V</font></b><br> </center>   {% macro pad_right(w, s) %}
                      {{ s }} {% set slen =  w - (s|length) %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %}
                      <div>          
                  - type: markdown
                    content: >-
                      <center><b><font color=#41CD52 size=6>{{
                      states('sensor.rs485_bms0_battery_current') }}
                      A</font></b><br> </center> {% macro pad_right(w, s) %}  {{
                      s }} {% set slen =  w - (s|length) %} {% for idx in
                      range(slen)%} &nbsp; {%endfor %} {%- endmacro %} {% macro
                      green(s) %} <font color=#41CD52 family=Consolas> {{ s }}
                      </font> {%- endmacro %}
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      {%- set ovp =
                      states('sensor.rs485_bms0_cell_overvoltage_protection')
                      %}  {%- set slv =
                      states('sensor.rs485_bms0_cell_smart_sleep_voltage') %} 
                      {%- set rcv =
                      states('sensor.rs485_bms0_cell_request_charge_voltage')
                      %}  {%- set bsv =
                      states('sensor.rs485_bms0_cell_balancing_starting_voltage')
                      %}  {%- set soc100 =
                      states('sensor.rs485_bms0_cell_soc100_voltage') %}  {%-
                      set ovpr =
                      states('sensor.rs485_bms0_cell_overvoltage_protection_recovery')
                      %}  {%- set rfv =
                      states('sensor.rs485_bms0_cell_request_float_voltage') %} 
                      {%- set uvpr =
                      states('sensor.rs485_bms0_cell_undervoltage_protection_recovery')
                      %}  {%- set soc0 =
                      states('sensor.rs485_bms0_cell_soc0_voltage') %}  {%- set
                      uvp =
                      states('sensor.rs485_bms0_cell_undervoltage_protection')
                      %}  {%- set poff =
                      states('sensor.rs485_bms0_cell_power_off_voltage') %} 
                      <table> <tr><td colspan=2><b>VOLTAGE
                      SETTINGS</b></td></tr> <tr><td>OVP</td><td>{{ovp}} V</tr>
                      <tr><td>Smart Sleep Volt.&nbsp;&nbsp;</td><td>{{slv}}
                      V</tr> <tr><td>RCV</td><td>{{rcv}} V</tr>
                      <tr><td>Bal.Start.Volt.</td><td>{{bsv}} V</tr> 
                      <tr><td>SOC 100%</td><td>{{soc100}} V</tr> 
                      <tr><td>OVPR</td><td>{{ovpr}} V</tr> 
                      <tr><td>RFV</td><td>{{rfv}} V</tr> 
                      <tr><td>UVPR</td><td>{{uvpr}} V</tr>  <tr><td>SOC
                      0%</td><td>{{soc0}} V</tr>  <tr><td>UVP</td><td>{{uvp}}
                      V</tr>  <tr><td>Power OFF</td><td>{{poff}}
                      V</tr></table><br>         

                      <b>TEMPERATURES</b> {% macro pad_right(w, s) %}  {{ s }}
                      {% set slen =  w - (s|length) %} {% for idx in
                      range(slen)%} &nbsp; {%endfor %} {%- endmacro %} {% macro
                      green(s) %} <font color=#41CD52 family=Consolas> {{ s }}
                      </font> {%- endmacro %} <div>    {{ pad_right(14, 'MOS 
                      Temp.:') }}  {{
                      green(states('sensor.rs485_bms0_temperature_powertube') +
                      ' °C') }} <br>  {{ pad_right(15, 'Battery T1:') }}  {{
                      green(states('sensor.rs485_bms0_temperature_sensor_1') + 
                      ' °C') }} <br>  {{ pad_right(15, 'Battery T2:') }}  {{
                      green(states('sensor.rs485_bms0_temperature_sensor_2') + 
                      ' °C') }} <br>  {{ pad_right(15, 'Battery T3:') }}  {{
                      green(states('sensor.rs485_bms0_temperature_sensor_3') + 
                      ' °C') }}           <br>  {{ pad_right(15, 'Battery T5:')
                      }}  {{
                      green(states('sensor.rs485_bms0_temperature_sensor_5') + 
                      ' °C') }}</div>
                  - type: markdown
                    content: >-
                      {%- set min_idx =
                      states('sensor.rs485_bms0_cell_voltage_min_cell_number')
                      %} 

                      {%- set max_idx =
                      states('sensor.rs485_bms0_cell_voltage_max_cell_number')
                      %}  

                      {%- set delta =
                      (states('sensor.rs485_bms0_cell_delta_voltage')|float)
                      %}  

                      <table> <tr><td colspan=4><b>CELL
                      INFO</b>&nbsp;&nbsp;(&Delta;:  {{delta}}V)</td></tr> {%
                      for idx in range(1, 17) -%} 
                        {%- set is_max = 1 if ((max_idx | int) == (idx | int)) else 0 %} 
                        {%- set is_min = 1 if ((min_idx | int) == (idx | int)) else 0 %}
                        {%- set cell_volt = states('sensor.rs485_bms0_cell_voltage_%02d' % idx) %} 
                        {%- set cell_resistance = states('sensor.rs485_bms0_cell_resistance_%02d' % idx) %} 
                        {%- set font_start = '<font color="#3090C7">' if is_max 
                            else '<font color="red">' if is_min 
                            else '' %} 
                        {%- set font_end = '</font>' if is_max or is_min 
                            else '' %} 
                        <tr><td>{{ "%02d" % idx}}.</td><td width=55px>{{ font_start }} {{ cell_volt }} V {{ font_end -}} </td><td width=8px align="center">/</td><td> {{ cell_resistance |float * 1000 }} mΩ  </td><tr>{% endfor %}
                      </table> {%- set network_nodes_available =
                      states('sensor.rs485_bms0_network_nodes_available') %}  
                      <b>NET:{{network_nodes_available}}</b>&nbsp;&nbsp;
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: custom:stack-in-card
                margin: false
                columns: 2
                mode: horizontal
                cards:
                  - type: markdown
                    content: >-
                      {% macro pad_right(w, s) %} {{ s }} {% set slen =  w -
                      (s|length) %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %} <div>  

                      {{ pad_right(20, "Total Capacity:") -}} {{
                      green(states('sensor.rs485_bms0_battery_capacity_total_setting')
                      + " Ah") }}<br>   {{ pad_right(20, 'Cycle Capacity:') }} 
                      {{
                      green(states('sensor.rs485_bms0_battery_capacity_total_charging_cycle')
                      + " Ah") }}<br>  
                       {{ pad_right(20, 'Balance Curr:') }}   
                      {{green(states('sensor.rs485_bms0_balancing_current') + '
                      A') }}  <br>  
                       {{ pad_right(20, 'Balancing Trigger:') }}   
                        {{green(states('sensor.rs485_bms0_balancing_trigger_voltage') + ' V') }} 
                      </div>
                  - type: markdown
                    content: >-
                      {% macro pad_right(w, s) %}  {{ s }} {% set slen =  w -
                      (s|length) %} {% for idx in range(slen)%} &nbsp; {%endfor
                      %} {%- endmacro %} {% macro green(s) %} <font
                      color=#41CD52 family=Consolas> {{ s }} </font> {%-
                      endmacro %} <div>  {{ pad_right(14, "Remaining:") -}}  {{
                      green(states('sensor.rs485_bms0_battery_capacity_state_of_charge')
                      + ' %') }}<br>    {{ pad_right(15, "Rem. Capacity:")
                      -}}    {{
                      green(states('sensor.rs485_bms0_battery_capacity_remaining')
                      + " Ah") }}<br>   {{ pad_right(15, 'Cycle Count:') }}  {{
                      green(states('sensor.rs485_bms0_charging_cycles' )+ '
                      cycles') }}<br>   {{ pad_right(15, 'Balancing Current:')
                      }}  {{ green(states('sensor.rs485_bms0_balancing_current'
                      )+ ' A') }} </div> </div>
      - type: vertical-stack
        cards:
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: >-
                      <center><font color=#3090C7 size=4>BMS_01 [{{
                      states('sensor.rs485_bms1_battery_total_runtime_formatted')
                      | string }}]&nbsp;&nbsp;{{
                      (states('sensor.rs485_bms1_battery_capacity_state_of_charge')
                      + ' %') }}   ({{
                        (states('sensor.rs485_bms1_battery_capacity_remaining')) }}Ah)
                      </center>
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      {%- set online =
                      states('binary_sensor.rs485_bms1_status_online')
                      %}                      

                      {%- set is_working = "online" if (online|bool) else
                      "offline" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (online|bool) else '<b><font size=2 color=red>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</font></b>' %} 

                      {{ font_start }} {{ "BMS:"}} {{ is_working }} {{font_end
                      -}}


                      {%- set precharging =
                      states('binary_sensor.rs485_bms1_status_precharging')
                      %}                      

                      {%- set is_working = "working" if (precharging|bool) else
                      "idle" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (precharging|bool) else '<font size=2>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</font>' %} 

                      {{ font_start }} {{ "Precharging:"}} {{ is_working }}
                      {{font_end -}}


                      {%- set heating =
                      states('binary_sensor.rs485_bms1_status_heating')
                      %}                      

                      {%- set is_working = "working" if (heating|bool) else
                      "idle" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (heating|bool) else '<font size=2>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</fontZ' %} 

                      {{ font_start }} {{ "Heating:"}} {{ is_working }}
                      {{font_end -}}
                  - type: markdown
                    content: >-
                      {%- set charging =
                      states('binary_sensor.rs485_bms1_status_charging')
                      %}                         

                      {%- set is_working = "working" if (charging|bool) else
                      "idle" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (charging|bool) else '<font size=2>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</font>' %} 

                      {{ font_start }} {{ "Charging:"}} {{ is_working }} {{
                      font_end -}}


                      {%- set discharging =
                      states('binary_sensor.rs485_bms1_status_discharging')
                      %}                         

                      {%- set is_working = "working" if (discharging|bool) else
                      "idle" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (discharging|bool) else '<font size=2>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</font>' %} 

                      {{ font_start }} {{ "Discharging:"}} {{ is_working }} {{
                      font_end -}}
                        
                      {%- set balancing_direction =
                      states('sensor.rs485_bms1_balancing_direction')%}   {%-
                      set is_working = "charging" if
                      (balancing_direction|int)>0 
                            else "discharging" if (balancing_direction|int)<0 
                            else 'idle' %} 
                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (balancing_direction|int)>0 
                            else '<b><font size=2 color=#3090C7>' if (balancing_direction|int)<0 
                            else '<font size=2>' %}                             
                      {%- set font_end = '</font></b>' if
                      (balancing_direction|int)!=0 else '</font>' %}  {{
                      font_start }} {{ "<br>Balancing:"}} {{ is_working }}
                      {{font_end -}}
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: >-
                      {%- set power_draw =
                      states('sensor.rs485_bms1_battery_power')|float %}  {%-
                      set power_charging =
                      states('sensor.rs485_bms1_battery_power_charging')|float
                      %}  {%- set power_discharging =
                      states('sensor.rs485_bms1_battery_power_discharging')|float
                      %} 

                      {%- set power_label = "(charging)" if (power_charging)>0 
                            else "(discharging)" if (power_discharging)>0 
                            else "" %} 

                      {%- set power_value = power_charging if
                      (power_charging)>0 
                            else power_discharging if (power_discharging)>0 
                            else power_draw %} 

                      {%- set font_start = '<b><font color=#41CD52 size=6>' if
                      (power_charging)>0 
                            else '<b><font color=#3090C7 size=6>' if (power_discharging)>0 
                            else '<b><font color=#aaaaaa size=6>' %}      
                            
                      {%- set font_end = '</font></b>' if (power_charging)>0 or
                      (power_discharging)>0 else '' %} 

                      <center>{{font_start}}{{ power_value }}W
                      {{power_label}}{{font_end}}</center>  

                      {% macro pad_right(w, s) %} {{ s }} {% set slen =  w -
                      (s|length) %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %}
                      <div>         
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      <center><b><font color=#41CD52
                      size=6>{{states('sensor.rs485_bms1_battery_voltage')
                      }}V</font></b><br> </center>   {% macro pad_right(w, s) %}
                      {{ s }} {% set slen =  w - (s|length) %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %}
                      <div>          
                  - type: markdown
                    content: >-
                      <center><b><font color=#41CD52 size=6>{{
                      states('sensor.rs485_bms1_battery_current') }}
                      A</font></b><br> </center> {% macro pad_right(w, s) %}  {{
                      s }} {% set slen =  w - (s|length) %} {% for idx in
                      range(slen)%} &nbsp; {%endfor %} {%- endmacro %} {% macro
                      green(s) %} <font color=#41CD52 family=Consolas> {{ s }}
                      </font> {%- endmacro %}
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      {%- set ovp =
                      states('sensor.rs485_bms1_cell_overvoltage_protection')
                      %}  {%- set slv =
                      states('sensor.rs485_bms1_cell_smart_sleep_voltage') %} 
                      {%- set rcv =
                      states('sensor.rs485_bms1_cell_request_charge_voltage')
                      %}  {%- set bsv =
                      states('sensor.rs485_bms1_cell_balancing_starting_voltage')
                      %}  {%- set soc100 =
                      states('sensor.rs485_bms1_cell_soc100_voltage') %}  {%-
                      set ovpr =
                      states('sensor.rs485_bms1_cell_overvoltage_protection_recovery')
                      %}  {%- set rfv =
                      states('sensor.rs485_bms1_cell_request_float_voltage') %} 
                      {%- set uvpr =
                      states('sensor.rs485_bms1_cell_undervoltage_protection_recovery')
                      %}  {%- set soc0 =
                      states('sensor.rs485_bms1_cell_soc0_voltage') %}  {%- set
                      uvp =
                      states('sensor.rs485_bms1_cell_undervoltage_protection')
                      %}  {%- set poff =
                      states('sensor.rs485_bms1_cell_power_off_voltage') %} 
                      <table> <tr><td colspan=2><b>VOLTAGE
                      SETTINGS</b></td></tr> <tr><td>OVP</td><td>{{ovp}} V</tr>
                      <tr><td>Smart Sleep Volt.&nbsp;&nbsp;</td><td>{{slv}}
                      V</tr> <tr><td>RCV</td><td>{{rcv}} V</tr>
                      <tr><td>Bal.Start.Volt.</td><td>{{bsv}} V</tr> 
                      <tr><td>SOC 100%</td><td>{{soc100}} V</tr> 
                      <tr><td>OVPR</td><td>{{ovpr}} V</tr> 
                      <tr><td>RFV</td><td>{{rfv}} V</tr> 
                      <tr><td>UVPR</td><td>{{uvpr}} V</tr>  <tr><td>SOC
                      0%</td><td>{{soc0}} V</tr>  <tr><td>UVP</td><td>{{uvp}}
                      V</tr>  <tr><td>Power OFF</td><td>{{poff}}
                      V</tr></table><br>         

                      <b>TEMPERATURES</b> {% macro pad_right(w, s) %}  {{ s }}
                      {% set slen =  w - (s|length) %} {% for idx in
                      range(slen)%} &nbsp; {%endfor %} {%- endmacro %} {% macro
                      green(s) %} <font color=#41CD52 family=Consolas> {{ s }}
                      </font> {%- endmacro %} <div>    {{ pad_right(14, 'MOS 
                      Temp.:') }}  {{
                      green(states('sensor.rs485_bms1_temperature_powertube') +
                      ' °C') }} <br>  {{ pad_right(15, 'Battery T1:') }}  {{
                      green(states('sensor.rs485_bms1_temperature_sensor_1') + 
                      ' °C') }} <br>  {{ pad_right(15, 'Battery T2:') }}  {{
                      green(states('sensor.rs485_bms1_temperature_sensor_2') + 
                      ' °C') }} <br>  {{ pad_right(15, 'Battery T3:') }}  {{
                      green(states('sensor.rs485_bms1_temperature_sensor_3') + 
                      ' °C') }}           <br>  {{ pad_right(15, 'Battery T5:')
                      }}  {{
                      green(states('sensor.rs485_bms1_temperature_sensor_5') + 
                      ' °C') }}</div>
                  - type: markdown
                    content: >-
                      {%- set min_idx =
                      states('sensor.rs485_bms1_cell_voltage_min_cell_number')
                      %} 

                      {%- set max_idx =
                      states('sensor.rs485_bms1_cell_voltage_max_cell_number')
                      %}  

                      {%- set delta =
                      (states('sensor.rs485_bms1_cell_delta_voltage')|float)
                      %}  

                      <table> <tr><td colspan=4><b>CELL
                      INFO</b>&nbsp;&nbsp;(&Delta;:  {{delta}}V

                      )</td></tr> {% for idx in range(1, 17) -%} 
                        {%- set is_max = 1 if ((max_idx | int) == (idx | int)) else 0 %} 
                        {%- set is_min = 1 if ((min_idx | int) == (idx | int)) else 0 %}
                        {%- set cell_volt = states('sensor.rs485_bms1_cell_voltage_%02d' % idx) %} 
                        {%- set cell_resistance = states('sensor.rs485_bms1_cell_resistance_%02d' % idx) %} 
                        {%- set font_start = '<font color="#3090C7">' if is_max 
                            else '<font color="red">' if is_min 
                            else '' %} 
                        {%- set font_end = '</font>' if is_max or is_min 
                            else '' %} 
                        <tr><td>{{ "%02d" % idx}}.</td><td width=55px>{{ font_start }} {{ cell_volt }} V {{ font_end -}} </td><td width=8px align="center">/</td><td> {{ cell_resistance |float * 1000 }} mΩ  </td><tr>{% endfor %}
                      </table> {%- set network_nodes_available =
                      states('sensor.rs485_bms1_network_nodes_available') %}  
                      <b>NET:{{network_nodes_available}}</b>&nbsp;&nbsp;
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: custom:stack-in-card
                margin: false
                columns: 2
                mode: horizontal
                cards:
                  - type: markdown
                    content: >-
                      {% macro pad_right(w, s) %} {{ s }} {% set slen =  w -
                      (s|length) %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %} <div>  

                      {{ pad_right(20, "Total Capacity:") -}} {{
                      green(states('sensor.rs485_bms1_battery_capacity_total_setting')
                      + " Ah") }}<br>   {{ pad_right(20, 'Cycle Capacity:') }} 
                      {{
                      green(states('sensor.rs485_bms1_battery_capacity_total_charging_cycle')
                      + " Ah") }}<br>  
                       {{ pad_right(20, 'Balance Curr:') }}   
                      {{green(states('sensor.rs485_bms1_balancing_current') + '
                      A') }} <br>  
                       {{ pad_right(20, 'Balancing Trigger:') }}   
                        {{green(states('sensor.rs485_bms1_balancing_trigger_voltage') + ' V') }} 
                      </div>
                  - type: markdown
                    content: >-
                      {% macro pad_right(w, s) %}  {{ s }} {% set slen =  w -
                      (s|length) %} {% for idx in range(slen)%} &nbsp; {%endfor
                      %} {%- endmacro %} {% macro green(s) %} <font
                      color=#41CD52 family=Consolas> {{ s }} </font> {%-
                      endmacro %} <div>  {{ pad_right(14, "Remaining:") -}}  {{
                      green(states('sensor.rs485_bms1_battery_capacity_state_of_charge')
                      + ' %') }}<br>    {{ pad_right(15, "Rem. Capacity:")
                      -}}    {{
                      green(states('sensor.rs485_bms1_battery_capacity_remaining')
                      + " Ah") }}<br>   {{ pad_right(15, 'Cycle Count:') }}  {{
                      green(states('sensor.rs485_bms1_charging_cycles' )+ '
                      cycles') }} <br>   {{ pad_right(15, 'Balancing Current:')
                      }}  {{ green(states('sensor.rs485_bms1_balancing_current'
                      )+ ' A') }} </div>
      - type: vertical-stack
        cards:
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: |-
                      <center>
                        {%- set alarm_active = states('sensor.rs485_bms0_battery_total_alarms_active')|int %}
                        {%- set alarm_active = 0 %}                
                        {%- set alarm_count = states('sensor.rs485_bms0_battery_total_alarms_count')|int %}
                        {%- set alarm_label = '<font size=4>ALARMS BMS_00</font>' if alarm_active==0
                            else '<b><font size=5 color=red>ALARMS BMS_00</font></b>' %}
                        {{alarm_label}} ({{ alarm_active }}/{{ alarm_count -}})<br></center>
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: >-
                      {%- set alarm_active =
                      states('sensor.rs485_bms0_battery_total_alarms_active')|int
                      %}

                      {%- set alarm_count =
                      states('sensor.rs485_bms0_battery_total_alarms_count')|int
                      %}

                      {%- set alarm_active = 0 %} 

                      {%- set alarms_label = '<center>No alarms found. Working
                      well</center>' if (alarm_active==0)
                          else 'ALARMS FOUND:' %} 
                      {{ alarms_label }}    

                      <center>  {% for state in states -%} 
                        {% if state.entity_id.startswith('binary_sensor.rs485_bms0_alarm_') and state.state!="off" %}
                          {% set last_word = state.name.split()[-1] | string %}
                          {% set last_status = state.state %}
                          {%- set font_start = '<font color="#3090C7">' if last_status=="off"
                              else '<font color="red">' if last_status=="on"  
                              else '<font color="gray">' %} 
                          {%- set font_end = '</font>' if last_status 
                              else '' %} 
                         {{ font_start }} {{ last_word }} (status: {{last_status}}) {{ font_end -}}<br>
                        {% endif %}
                      {% endfor %} </center>
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: |-
                  <center>
                    {%- set alarm_active = states('sensor.rs485_bms1_battery_total_alarms_active')|int %}
                    {%- set alarm_active = 0 %}                
                    {%- set alarm_count = states('sensor.rs485_bms1_battery_total_alarms_count')|int %}
                    {%- set alarm_label = '<font size=4>ALARMS BMS_01</font>' if alarm_active==0
                        else '<b><font size=5 color=red>ALARMS BMS_01</font></b>' %}
                    {{alarm_label}} ({{ alarm_active }}/{{ alarm_count -}})<br></center>
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: >-
                  {%- set alarm_active =
                  states('sensor.rs485_bms1_battery_total_alarms_active')|int %}

                  {%- set alarm_count =
                  states('sensor.rs485_bms1_battery_total_alarms_count')|int %}

                  {%- set alarm_active = 0 %} 

                  {%- set alarms_label = '<center>No alarms found. Working
                  well</center>' if (alarm_active==0)
                      else 'ALARMS FOUND:' %} 
                  {{ alarms_label }}    

                  <center>  {% for state in states -%} 
                    {% if state.entity_id.startswith('binary_sensor.rs485_bms1_alarm_') and state.state!="off" %}
                      {% set last_word = state.name.split()[-1] | string %}
                      {% set last_status = state.state %}
                      {%- set font_start = '<font color="#3090C7">' if last_status=="off"
                          else '<font color="red">' if last_status=="on"  
                          else '<font color="gray">' %} 
                      {%- set font_end = '</font>' if last_status 
                          else '' %} 
                     {{ font_start }} {{ last_word }} (status: {{last_status}}) {{ font_end -}}<br>
                    {% endif %}
                  {% endfor %} </center>
  - title: BMS0 (cells)
    badges: []
    cards:
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms0_cell_voltage_01
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms0_cell_voltage_05
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms0_cell_voltage_02
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms0_cell_voltage_06
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms0_cell_voltage_03
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms0_cell_voltage_07
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms0_cell_voltage_04
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms0_cell_voltage_08
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms0_cell_voltage_09
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms0_cell_voltage_10
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms0_cell_voltage_11
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms0_cell_voltage_12
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms0_cell_voltage_13
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms0_cell_voltage_14
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms0_cell_voltage_15
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms0_cell_voltage_16
      - graph: line
        type: sensor
        detail: 1
        entity: sensor.rs485_bms0_cell_voltage_max_cell_number
      - graph: line
        type: sensor
        detail: 1
        entity: sensor.rs485_bms0_cell_voltage_min_cell_number
  - title: BMS1 (cells)
    badges: []
    cards:
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms1_cell_voltage_01
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms1_cell_voltage_05
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms1_cell_voltage_02
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms1_cell_voltage_06
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms1_cell_voltage_03
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms1_cell_voltage_07
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms1_cell_voltage_04
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms1_cell_voltage_08
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms1_cell_voltage_09
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms1_cell_voltage_10
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms1_cell_voltage_11
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms1_cell_voltage_12
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms1_cell_voltage_13
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms1_cell_voltage_14
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms1_cell_voltage_15
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.rs485_bms1_cell_voltage_16
      - graph: line
        type: sensor
        detail: 1
        entity: sensor.rs485_bms1_cell_voltage_max_cell_number
      - graph: line
        type: sensor
        detail: 1
        entity: sensor.rs485_bms1_cell_voltage_min_cell_number
  - path: bms0_settings
    title: BMS0 (SETTINGS)
    icon: ''
    badges: []
    cards:
      - type: entities
        entities:
          - entity: switch.rs485_bms0_charging
            name: CHARGE
          - entity: switch.rs485_bms0_discharging
            name: DISCHARGE
          - entity: switch.rs485_bms0_balancing
            name: BALANCING
          - entity: switch.rs485_bms0_emergency
            name: EMERGENCY
          - entity: switch.rs485_bms0_heating
            name: HEATING
          - entity: switch.rs485_bms0_disable_temperature_sensors
            name: DISABLE TEMPERATURE SENSORS
          - entity: switch.rs485_bms0_display_always_on
            name: DISPLAY ALWAYS ON
          - entity: switch.rs485_bms0_smart_sleep_on
            name: SMART SLEEP ON
          - entity: switch.rs485_bms0_disable_pcl_module
            name: DISABLE PCL MODULE
          - entity: switch.rs485_bms0_timed_stored_data
            name: TIMED_STORED_DATA
          - entity: switch.rs485_bms0_charging_float_mode
            name: CHARGE FLOAT MODE
        title: Switch (Read Only)
        show_header_toggle: false
  - path: bms1_settings
    title: BMS1 (SETTINGS)
    icon: ''
    badges: []
    cards:
      - type: entities
        entities:
          - entity: switch.rs485_bms1_charging
            name: CHARGE
          - entity: switch.rs485_bms1_discharging
            name: DISCHARGE
          - entity: switch.rs485_bms1_balancing
            name: BALANCING
          - entity: switch.rs485_bms1_emergency
            name: EMERGENCY
          - entity: switch.rs485_bms1_heating
            name: HEATING
          - entity: switch.rs485_bms1_disable_temperature_sensors
            name: DISABLE TEMPERATURE SENSORS
          - entity: switch.rs485_bms1_display_always_on
            name: DISPLAY ALWAYS ON
          - entity: switch.rs485_bms1_smart_sleep_on
            name: SMART SLEEP ON
          - entity: switch.rs485_bms1_disable_pcl_module
            name: DISABLE PCL MODULE
          - entity: switch.rs485_bms1_timed_stored_data
            name: TIMED_STORED_DATA
          - entity: switch.rs485_bms1_charging_float_mode
            name: CHARGE FLOAT MODE
        title: Switch (Read Only)
        show_header_toggle: false
  - title: BMS0 (PROTECTION)
    path: protection0
    badges: []
    cards:
      - type: entities
        entities:
          - entity: sensor.rs485_bms0_mos_overtemperature_protection
          - entity: sensor.rs485_bms0_mos_overtemperature_protection_recovery
          - entity: sensor.rs485_bms0_charging_overtemperature_protection
          - entity: sensor.rs485_bms0_discharging_overtemperature_protection
          - entity: sensor.rs485_bms0_charging_overtemperature_protection_recovery
          - entity: sensor.rs485_bms0_discharging_overtemperature_protection_recovery
          - entity: sensor.rs485_bms0_charging_lowtemperature_protection_recovery
          - entity: sensor.rs485_bms0_charging_lowtemperature_protection
        title: TEMPERATURE
      - type: entities
        entities:
          - entity: sensor.rs485_bms0_max_charging_current
          - entity: sensor.rs485_bms0_charging_overcurrent_protection_delay
          - entity: sensor.rs485_bms0_charging_overcurrent_protection_recovery_delay
          - entity: sensor.rs485_bms0_max_discharging_current
          - entity: sensor.rs485_bms0_discharging_overcurrent_protection_delay
          - entity: >-
              sensor.rs485_bms0_discharging_overcurrent_protection_recovery_delay
          - entity: sensor.rs485_bms0_short_circuit_protection_recovery_delay
          - entity: sensor.rs485_bms0_max_balancing_current
        title: CURRENT
  - title: BMS1 (PROTECTION)
    path: protection1
    badges: []
    cards:
      - type: entities
        entities:
          - entity: sensor.rs485_bms1_mos_overtemperature_protection
          - entity: sensor.rs485_bms1_mos_overtemperature_protection_recovery
          - entity: sensor.rs485_bms1_charging_overtemperature_protection
          - entity: sensor.rs485_bms1_discharging_overtemperature_protection
          - entity: sensor.rs485_bms1_charging_overtemperature_protection_recovery
          - entity: sensor.rs485_bms1_discharging_overtemperature_protection_recovery
          - entity: sensor.rs485_bms1_charging_lowtemperature_protection_recovery
          - entity: sensor.rs485_bms1_charging_lowtemperature_protection
        title: TEMPERATURE
      - type: entities
        entities:
          - entity: sensor.rs485_bms1_max_charging_current
          - entity: sensor.rs485_bms1_charging_overcurrent_protection_delay
          - entity: sensor.rs485_bms1_charging_overcurrent_protection_recovery_delay
          - entity: sensor.rs485_bms1_max_discharging_current
          - entity: sensor.rs485_bms1_discharging_overcurrent_protection_delay
          - entity: >-
              sensor.rs485_bms1_discharging_overcurrent_protection_recovery_delay
          - entity: sensor.rs485_bms1_short_circuit_protection_recovery_delay
          - entity: sensor.rs485_bms1_max_balancing_current
        title: CURRENT
